services:
  event-collector:
    build: ./event_collector
    ports:
      - "8000:8000"
    volumes:
      - ./event-collector:/app
    env_file:
      - .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - DELIVERY_HISTORY_LIMIT=${DELIVERY_HISTORY_LIMIT}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
      - PYTHONPATH=/app
    depends_on:
      - redis
      - postgres

  deliveries:
    build: ./deliveries
    environment:
      BASE_URL: http://event-collector:8000
    volumes:
      - ./deliveries:/app/deliveries
    depends_on:
      - event-collector
    command: python generate_events.py http://event-collector:8000
    restart: on-failure
  
  redis:
    image: redis:${REDIS_VERSION}
    ports:
      - "$REDIS_PORT:6379"

  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - "$POSTGRES_PORT:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  test-db:
    image: postgres:15
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_DB: test_db

  test:
    build: ./event_collector
    command: sh -c "echo $DATABASE_URL && pytest"
    volumes:
      - ./event-collector:/app
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql+asyncpg://test:test@test-db:5432/test_db
    depends_on:
      - test-db
    

volumes:
  postgres_data:

networks:
  default:
    driver: bridge
